#!/usr/bin/env python3
"""
ÏÑ§Ïπò Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏
LLM Ï∂îÎ°† ÏÑ±Îä• ÌèâÍ∞Ä ÏãúÏä§ÌÖúÏùò ÏÑ§ÏπòÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏôÑÎ£åÎêòÏóàÎäîÏßÄ Í≤ÄÏ¶ùÌï©ÎãàÎã§.
"""
import sys
import os
import argparse
import logging
from pathlib import Path
from typing import Dict, List, Any, Tuple

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º Python pathÏóê Ï∂îÍ∞Ä
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.system_validator import SystemValidator, ValidationStatus
from core.secure_database_config import get_database_config_status, run_database_diagnostics
from core.oracle_compatibility import configure_oracle_compatibility
from core.error_handler import handle_database_error, format_user_error
from monitoring.logging_system import setup_application_logging

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SetupValidator:
    """ÏÑ§Ïπò Í≤ÄÏ¶ùÍ∏∞"""

    def __init__(self, config_file: str = None):
        self.config_file = config_file or "config/db_config.json"
        self.validator = SystemValidator()
        self.validation_results = {}

    def run_complete_validation(self, skip_db_test: bool = False) -> Dict[str, Any]:
        """ÏôÑÏ†ÑÌïú ÏÑ§Ïπò Í≤ÄÏ¶ù Ïã§Ìñâ"""
        print("üîç LLM Ï∂îÎ°† ÏÑ±Îä• ÌèâÍ∞Ä ÏãúÏä§ÌÖú ÏÑ§Ïπò Í≤ÄÏ¶ù ÏãúÏûë...")
        print("=" * 60)

        results = {
            'overall_status': 'unknown',
            'validations': {},
            'recommendations': [],
            'next_steps': []
        }

        # 1. ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ Í≤ÄÏ¶ù
        print("1Ô∏è‚É£ ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ Í≤ÄÏ¶ù Ï§ë...")
        sys_validation = self._validate_system_requirements()
        results['validations']['system'] = sys_validation

        # 2. ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Í≤ÄÏ¶ù
        print("2Ô∏è‚É£ ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Í≤ÄÏ¶ù Ï§ë...")
        structure_validation = self._validate_project_structure()
        results['validations']['structure'] = structure_validation

        # 3. ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù
        print("3Ô∏è‚É£ Python ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù Ï§ë...")
        deps_validation = self._validate_dependencies()
        results['validations']['dependencies'] = deps_validation

        # 4. ÏÑ§Ï†ï ÌååÏùº Í≤ÄÏ¶ù
        print("4Ô∏è‚É£ ÏÑ§Ï†ï ÌååÏùº Í≤ÄÏ¶ù Ï§ë...")
        config_validation = self._validate_configuration()
        results['validations']['configuration'] = config_validation

        # 5. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ (ÏÑ†ÌÉùÏ†Å)
        if not skip_db_test:
            print("5Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë...")
            db_validation = self._validate_database_connection()
            results['validations']['database'] = db_validation
        else:
            print("5Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎúÄ")
            results['validations']['database'] = {
                'status': 'skipped',
                'message': 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌÖåÏä§Ìä∏Î•º Í±¥ÎÑàÎõ∞ÏóàÏäµÎãàÎã§'
            }

        # 6. Oracle Ìò∏ÌôòÏÑ± Í≤ÄÏ¶ù
        if not skip_db_test and results['validations']['database']['status'] == 'pass':
            print("6Ô∏è‚É£ Oracle Ìò∏ÌôòÏÑ± Í≤ÄÏ¶ù Ï§ë...")
            oracle_validation = self._validate_oracle_compatibility()
            results['validations']['oracle'] = oracle_validation

        # 7. Ï†ÑÏ≤¥ Í≤∞Í≥º Ï¢ÖÌï©
        results['overall_status'] = self._determine_overall_status(results['validations'])
        results['recommendations'] = self._generate_recommendations(results['validations'])
        results['next_steps'] = self._generate_next_steps(results['overall_status'])

        return results

    def _validate_system_requirements(self) -> Dict[str, Any]:
        """ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ Í≤ÄÏ¶ù"""
        try:
            # SystemValidator ÏÇ¨Ïö©
            validation_results = self.validator._validate_python_environment()
            validation_results.extend(self.validator._validate_system_resources())

            # Í≤∞Í≥º ÏöîÏïΩ
            failed_count = sum(1 for r in validation_results if r.status == ValidationStatus.FAIL)
            warning_count = sum(1 for r in validation_results if r.status == ValidationStatus.WARNING)

            if failed_count > 0:
                status = 'fail'
                message = f"{failed_count}Í∞ú ÌïÑÏàò ÏöîÍµ¨ÏÇ¨Ìï≠ ÎØ∏Ï∂©Ï°±"
            elif warning_count > 0:
                status = 'warning'
                message = f"{warning_count}Í∞ú Í∂åÏû•ÏÇ¨Ìï≠ ÎØ∏Ï∂©Ï°±"
            else:
                status = 'pass'
                message = "Î™®Îì† ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±"

            details = []
            for result in validation_results:
                if result.status in [ValidationStatus.FAIL, ValidationStatus.WARNING]:
                    details.append(f"{result.name}: {result.message}")

            return {
                'status': status,
                'message': message,
                'details': details,
                'recommendations': [r.recommendations for r in validation_results if r.recommendations]
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f"ÏãúÏä§ÌÖú Í≤ÄÏ¶ù Ï§ë Ïò§Î•ò: {e}",
                'details': [str(e)]
            }

    def _validate_project_structure(self) -> Dict[str, Any]:
        """ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Í≤ÄÏ¶ù"""
        required_dirs = [
            'core', 'config', 'scripts', 'evaluation',
            'data_loaders', 'monitoring', 'docs'
        ]

        required_files = [
            'main.py', 'requirements.txt', 'README.md'
        ]

        missing_dirs = [d for d in required_dirs if not os.path.isdir(d)]
        missing_files = [f for f in required_files if not os.path.isfile(f)]

        if missing_dirs or missing_files:
            status = 'fail' if missing_dirs else 'warning'
            message = "ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞Ïóê ÎàÑÎùΩÎêú Ìï≠Î™©Ïù¥ ÏûàÏäµÎãàÎã§"
            details = []
            if missing_dirs:
                details.append(f"ÎàÑÎùΩÎêú ÎîîÎ†âÌÜ†Î¶¨: {', '.join(missing_dirs)}")
            if missing_files:
                details.append(f"ÎàÑÎùΩÎêú ÌååÏùº: {', '.join(missing_files)}")
        else:
            status = 'pass'
            message = "ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞Í∞Ä Ïò¨Î∞îÎ¶ÖÎãàÎã§"
            details = []

        return {
            'status': status,
            'message': message,
            'details': details
        }

    def _validate_dependencies(self) -> Dict[str, Any]:
        """Python ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù"""
        required_packages = {
            'oracledb': '1.4.0',
            'requests': '2.31.0',
            'psutil': '5.9.0'
        }

        missing_packages = []
        outdated_packages = []

        for package, min_version in required_packages.items():
            try:
                import importlib
                module = importlib.import_module(package)

                version = getattr(module, '__version__', 'Unknown')
                if version != 'Unknown':
                    from packaging import version as pkg_version
                    if pkg_version.parse(version) < pkg_version.parse(min_version):
                        outdated_packages.append(f"{package} {version} (ÌïÑÏöî: {min_version}+)")

            except ImportError:
                missing_packages.append(f"{package}>={min_version}")

        if missing_packages:
            status = 'fail'
            message = f"{len(missing_packages)}Í∞ú ÌïÑÏàò Ìå®ÌÇ§ÏßÄ ÎàÑÎùΩ"
            details = [f"ÎàÑÎùΩ Ìå®ÌÇ§ÏßÄ: {', '.join(missing_packages)}"]
        elif outdated_packages:
            status = 'warning'
            message = f"{len(outdated_packages)}Í∞ú Ìå®ÌÇ§ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî"
            details = [f"ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî: {', '.join(outdated_packages)}"]
        else:
            status = 'pass'
            message = "Î™®Îì† ÌïÑÏàò Ìå®ÌÇ§ÏßÄÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏäµÎãàÎã§"
            details = []

        return {
            'status': status,
            'message': message,
            'details': details,
            'install_command': f"pip install {' '.join(missing_packages)}" if missing_packages else None
        }

    def _validate_configuration(self) -> Dict[str, Any]:
        """ÏÑ§Ï†ï ÌååÏùº Í≤ÄÏ¶ù"""
        try:
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï ÏÉÅÌÉú ÌôïÏù∏
            db_status = get_database_config_status(self.config_file)

            issues = []
            if not db_status['config_file_exists']:
                issues.append("ÏÑ§Ï†ï ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§")

            if not db_status['env_vars_available']:
                issues.append("ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")

            if issues:
                status = 'warning' if db_status['env_vars_available'] or db_status['config_file_exists'] else 'fail'
                message = "ÏÑ§Ï†ïÏóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§"
                details = issues
            else:
                status = 'pass'
                message = "ÏÑ§Ï†ïÏù¥ Ïò¨Î∞îÎ•¥Í≤å Íµ¨ÏÑ±ÎêòÏóàÏäµÎãàÎã§"
                details = []

            return {
                'status': status,
                'message': message,
                'details': details,
                'has_config_file': db_status['config_file_exists'],
                'has_env_vars': db_status['env_vars_available']
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f"ÏÑ§Ï†ï Í≤ÄÏ¶ù Ï§ë Ïò§Î•ò: {e}",
                'details': [str(e)]
            }

    def _validate_database_connection(self) -> Dict[str, Any]:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Í≤ÄÏ¶ù"""
        try:
            from core.secure_database_config import SecureDatabaseConfigLoader

            loader = SecureDatabaseConfigLoader()
            secure_config = loader.load_secure_config(self.config_file)
            db_manager = loader.create_database_manager(secure_config)

            # Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            if db_manager.db_config.test_connection():
                status = 'pass'
                message = "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ"
                details = [f"DSN: {secure_config.dsn}", f"Î™®Îìú: {secure_config.oracle_mode}"]
            else:
                status = 'fail'
                message = "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®"
                details = ["Ïó∞Í≤∞ ÌÖåÏä§Ìä∏Í∞Ä Ïã§Ìå®ÌñàÏäµÎãàÎã§"]

            return {
                'status': status,
                'message': message,
                'details': details
            }

        except Exception as e:
            error_info = handle_database_error(e, "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏")

            return {
                'status': 'fail',
                'message': "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®",
                'details': [error_info.user_message],
                'error_code': error_info.error_code,
                'solutions': error_info.solutions[:3]  # ÏµúÎåÄ 3Í∞ú Ìï¥Í≤∞Ï±Ö
            }

    def _validate_oracle_compatibility(self) -> Dict[str, Any]:
        """Oracle Ìò∏ÌôòÏÑ± Í≤ÄÏ¶ù"""
        try:
            from core.secure_database_config import SecureDatabaseConfigLoader

            loader = SecureDatabaseConfigLoader()
            secure_config = loader.load_secure_config(self.config_file)

            # Oracle Ìò∏ÌôòÏÑ± ÌôïÏù∏
            compatibility_info = configure_oracle_compatibility(
                username=secure_config.username,
                password=secure_config.password,
                dsn=secure_config.dsn,
                preferred_mode=secure_config.oracle_mode
            )

            if compatibility_info.mode:
                status = 'pass'
                message = f"Oracle {compatibility_info.mode.value} Î™®Îìú Ìò∏Ìôò"
                details = [f"Î≤ÑÏ†Ñ: {compatibility_info.version or 'Unknown'}"]

                if compatibility_info.warnings:
                    details.extend([f"Í≤ΩÍ≥†: {w}" for w in compatibility_info.warnings[:2]])

            else:
                status = 'fail'
                message = "Oracle Ìò∏ÌôòÏÑ± Î¨∏Ï†ú"
                details = compatibility_info.warnings or ["Ìò∏ÌôòÏÑ± ÌôïÏù∏ Ïã§Ìå®"]

            return {
                'status': status,
                'message': message,
                'details': details,
                'mode': compatibility_info.mode.value if compatibility_info.mode else None,
                'version': compatibility_info.version
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f"Oracle Ìò∏ÌôòÏÑ± ÌôïÏù∏ Ï§ë Ïò§Î•ò: {e}",
                'details': [str(e)]
            }

    def _determine_overall_status(self, validations: Dict[str, Any]) -> str:
        """Ï†ÑÏ≤¥ ÏÉÅÌÉú Í≤∞Ï†ï"""
        statuses = [v.get('status', 'unknown') for v in validations.values()]

        if 'fail' in statuses or 'error' in statuses:
            return 'fail'
        elif 'warning' in statuses:
            return 'warning'
        elif all(s in ['pass', 'skipped'] for s in statuses):
            return 'pass'
        else:
            return 'unknown'

    def _generate_recommendations(self, validations: Dict[str, Any]) -> List[str]:
        """Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±"""
        recommendations = []

        for validation_name, validation in validations.items():
            if validation.get('status') in ['fail', 'warning', 'error']:

                # ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ Í¥ÄÎ†®
                if validation_name == 'system':
                    recommendations.append("ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÍ≥† ÌïÑÏöîÌïú ÏóÖÍ∑∏Î†àÏù¥ÎìúÎ•º ÏßÑÌñâÌïòÏÑ∏Ïöî")

                # ÏùòÏ°¥ÏÑ± Í¥ÄÎ†®
                elif validation_name == 'dependencies':
                    if validation.get('install_command'):
                        recommendations.append(f"Îã§Ïùå Î™ÖÎ†πÏúºÎ°ú ÎàÑÎùΩÎêú Ìå®ÌÇ§ÏßÄÎ•º ÏÑ§ÏπòÌïòÏÑ∏Ïöî: {validation['install_command']}")

                # ÏÑ§Ï†ï Í¥ÄÎ†®
                elif validation_name == 'configuration':
                    if not validation.get('has_config_file'):
                        recommendations.append("python scripts/init_database.py --create-config Î™ÖÎ†πÏúºÎ°ú ÏÑ§Ï†ï ÌååÏùºÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî")
                    if not validation.get('has_env_vars'):
                        recommendations.append("Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÌôòÍ≤Ω Î≥ÄÏàò ÏÇ¨Ïö©ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§ (.env ÌååÏùº ÏÉùÏÑ±)")

                # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í¥ÄÎ†®
                elif validation_name == 'database':
                    if validation.get('solutions'):
                        recommendations.extend(validation['solutions'])
                    recommendations.append("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ≥¥ÏôÄ ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî")

        return list(set(recommendations))  # Ï§ëÎ≥µ Ï†úÍ±∞

    def _generate_next_steps(self, overall_status: str) -> List[str]:
        """Îã§Ïùå Îã®Í≥Ñ ÏÉùÏÑ±"""
        if overall_status == 'pass':
            return [
                "üéâ ÏÑ§ÏπòÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
                "python scripts/init_database.py Î™ÖÎ†πÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î•º Ï¥àÍ∏∞ÌôîÌïòÏÑ∏Ïöî",
                "python scripts/load_sample_data.py Î™ÖÎ†πÏúºÎ°ú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌïòÏÑ∏Ïöî",
                "python main.py Î™ÖÎ†πÏúºÎ°ú ÏãúÏä§ÌÖúÏùÑ Ïã§ÌñâÌï¥Î≥¥ÏÑ∏Ïöî",
                "docs/USER_GUIDE.md Î¨∏ÏÑúÎ•º Ï∞∏Ï°∞ÌïòÏó¨ ÏÇ¨Ïö©Î≤ïÏùÑ ÏùµÌûàÏÑ∏Ïöî"
            ]
        elif overall_status == 'warning':
            return [
                "‚ö†Ô∏è ÏùºÎ∂Ä Í∂åÏû•ÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
                "ÏúÑÏùò Í∂åÏû•ÏÇ¨Ìï≠ÏùÑ Îî∞Îùº ÏÑ§Ï†ïÏùÑ Í∞úÏÑ†ÌïòÏÑ∏Ïöî",
                "Í∞úÏÑ† ÌõÑ Îã§Ïãú Í≤ÄÏ¶ùÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî: python scripts/validate_setup.py",
                "Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ docs/INSTALLATION_GUIDE.mdÎ•º Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî"
            ]
        else:  # fail or error
            return [
                "‚ùå ÏÑ§ÏπòÏóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§",
                "ÏúÑÏùò Í∂åÏû•ÏÇ¨Ìï≠ÏùÑ Îî∞Îùº Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏÑ∏Ïöî",
                "docs/INSTALLATION_GUIDE.mdÏùò Ìä∏Îü¨Î∏îÏäàÌåÖ ÏÑπÏÖòÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
                "Ìï¥Í≤∞ ÌõÑ Îã§Ïãú Í≤ÄÏ¶ùÌïòÏÑ∏Ïöî: python scripts/validate_setup.py",
                "ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÎ©¥ GitHub IssuesÏóê Î¨∏ÏùòÌïòÏÑ∏Ïöî"
            ]

    def format_results(self, results: Dict[str, Any], detailed: bool = False) -> str:
        """Í≤∞Í≥º Ìè¨Îß∑ÌåÖ"""
        lines = []

        # Ìó§Îçî
        status_emoji = {
            'pass': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'fail': '‚ùå',
            'error': 'üö®',
            'skipped': '‚ÑπÔ∏è'
        }

        overall_emoji = status_emoji.get(results['overall_status'], '‚ùì')
        lines.append("=" * 60)
        lines.append(f"{overall_emoji} ÏÑ§Ïπò Í≤ÄÏ¶ù Í≤∞Í≥º: {results['overall_status'].upper()}")
        lines.append("=" * 60)

        # Í∞úÎ≥Ñ Í≤ÄÏ¶ù Í≤∞Í≥º
        if detailed:
            lines.append("\nüìã ÏÉÅÏÑ∏ Í≤ÄÏ¶ù Í≤∞Í≥º:")
            for name, validation in results['validations'].items():
                emoji = status_emoji.get(validation.get('status', 'unknown'), '‚ùì')
                lines.append(f"\n{emoji} {name.title()}: {validation.get('message', 'Unknown')}")

                if validation.get('details'):
                    for detail in validation['details']:
                        lines.append(f"   ‚Ä¢ {detail}")

        # Í∂åÏû•ÏÇ¨Ìï≠
        if results['recommendations']:
            lines.append(f"\nüí° Í∂åÏû•ÏÇ¨Ìï≠:")
            for i, rec in enumerate(results['recommendations'], 1):
                lines.append(f"   {i}. {rec}")

        # Îã§Ïùå Îã®Í≥Ñ
        if results['next_steps']:
            lines.append(f"\nüöÄ Îã§Ïùå Îã®Í≥Ñ:")
            for step in results['next_steps']:
                lines.append(f"   ‚Ä¢ {step}")

        lines.append("\n" + "=" * 60)
        return "\n".join(lines)


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(description="LLM Ï∂îÎ°† ÌèâÍ∞Ä ÏãúÏä§ÌÖú ÏÑ§Ïπò Í≤ÄÏ¶ù")

    parser.add_argument(
        "--config", "-c",
        default="config/db_config.json",
        help="Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú"
    )

    parser.add_argument(
        "--skip-db",
        action="store_true",
        help="Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎõ∞Í∏∞"
    )

    parser.add_argument(
        "--detailed", "-d",
        action="store_true",
        help="ÏÉÅÏÑ∏ Í≤∞Í≥º ÌëúÏãú"
    )

    parser.add_argument(
        "--quiet", "-q",
        action="store_true",
        help="ÏµúÏÜåÌïúÏùò Ï∂úÎ†•Îßå ÌëúÏãú"
    )

    parser.add_argument(
        "--fix",
        action="store_true",
        help="ÏûêÎèô ÏàòÏ†ï Ï†úÏïà ÏÉùÏÑ±"
    )

    args = parser.parse_args()

    # Î°úÍπÖ Î†àÎ≤® Ï°∞Ï†ï
    if args.quiet:
        logging.getLogger().setLevel(logging.WARNING)

    try:
        # Í≤ÄÏ¶ù Ïã§Ìñâ
        validator = SetupValidator(args.config)
        results = validator.run_complete_validation(skip_db_test=args.skip_db)

        # Í≤∞Í≥º Ï∂úÎ†•
        if not args.quiet:
            report = validator.format_results(results, detailed=args.detailed)
            print(report)

        # ÏûêÎèô ÏàòÏ†ï Ï†úÏïà
        if args.fix and results['overall_status'] != 'pass':
            print("\nüîß ÏûêÎèô ÏàòÏ†ï Ï†úÏïà:")
            print("Îã§Ïùå Î™ÖÎ†πÎì§ÏùÑ Ïã§ÌñâÌï¥Î≥¥ÏÑ∏Ïöî:\n")

            for validation_name, validation in results['validations'].items():
                if validation.get('status') in ['fail', 'error'] and validation.get('install_command'):
                    print(f"# {validation_name} ÏàòÏ†ï")
                    print(validation['install_command'])
                    print()

        # Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï
        if results['overall_status'] == 'pass':
            sys.exit(0)
        elif results['overall_status'] == 'warning':
            sys.exit(1) if not args.quiet else sys.exit(0)
        else:
            sys.exit(2)

    except KeyboardInterrupt:
        print("\nÏ§ëÎã®Îê®")
        sys.exit(130)
    except Exception as e:
        logger.error(f"Í≤ÄÏ¶ù Ï§ë ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò: {e}")
        if not args.quiet:
            import traceback
            traceback.print_exc()
        sys.exit(3)


if __name__ == "__main__":
    main()